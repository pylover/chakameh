#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import sys
import argparse
import subprocess as sb

parser = argparse.ArgumentParser(description='Export a database table into csv file.')
parser.add_argument('filename', metavar='DBFILE',help='Sqlite filename.')
parser.add_argument('-c','--columns', metavar='COLUMN',required=True,nargs='+',help='Column list.')
parser.add_argument('-t','--table', metavar='TABLE',required=True,help='Table name.')
parser.add_argument('-s','--sort-by', dest='order',metavar='COLUMN',nargs='+',help='Column name to sort.')
parser.add_argument('-o','--output', metavar='FILENAME',default='stdout',help='Output file, default: stdout.')
parser.add_argument('-H','--header', action='store_true',default=False,help='Add header row')

cmd_template="""
sqlite3 %(dbfile)s <<!
.headers %(header)s
.mode csv
.output %(out)s
select %(columns)s from %(table)s order by %(order)s;
!
"""

def main():
    args = parser.parse_args()
    cmd = cmd_template % {'dbfile':args.filename,
                          'out': args.output,
                          'table': args.table,
                          'columns': ','.join(args.columns),
                          'order': ','.join(args.columns) if not args.order else ','.join(args.order),
                          'header': 'on' if args.header else 'off' }
    p = sb.Popen(cmd, shell=True, stdout=sys.stdout, stderr=sys.stderr)
    p.wait()
    sys.exit(0)
    
if __name__ == '__main__':
    main()